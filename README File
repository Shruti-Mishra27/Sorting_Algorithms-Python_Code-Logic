Sorting-Algorithms
EXPLANATION IRRESPECTIVE OF PROGRAMMIMG LANGUAGE USED.
5 Types of sorting algorithms:-
------------------------------------------------------------------------------------------------------------
1. Quick Sort
a) Choosing the pivot element from list or array.
b) Positiong the pivot such that:
-- On its left all the elements are smaller than it
-- On its right all the elements are greater than it.
c) Dividing the array in two parts with respect to the pivot.
d) Sorting the two subarrays recursively.

------------------------------------------------------------------------------------------------------------
2. Bubble Sort
a) Algorithm includes Comparing and Swaping pair of adjacent elements based on increasing order.
b) At every paas, the largest element gets shifted to the right-most position.
c) Next we compare and swap all the elements except the largest element found at earlier paas(rigth-most).
d) Repeat the swap-compare untill the arrar is sorted.
e) For sorting "n" number of elements, we have to do "n-1" number of paases.

------------------------------------------------------------------------------------------------------------
3. Merge Sort
a) First we need to divide the unsorted array untill it contains single element in the subarray.
b) We compare each element of subarrays and group them in ascending or descending order. 
c) Repeat above step untill both arrays are merged and sorted.

------------------------------------------------------------------------------------------------------------
4. Insertion Sort
a) Includes Shifting of elements in an array. 
b) For sorting "n" number of elements, we have to do "n-1" number of paases.
c) First we consider first element to be sorted and rest part to be unsorted.
d) Now we select first element of unsorted array and compare it with the sorted part(here element).
e) If sorted part is greater than the element, we insert the element in correct index(shift it).
f) If not, then nothing happens.
h) Then take next element in unsorted part and compare it with sorted elements.
i) Repeat step e) to h) to get the whole array sorted.
------------------------------------------------------------------------------------------------------------

5. Selection Sort
a) Scan through unsorted array for the minimum element.
b) Then swap it into the zeroth index of the array.
c) For finding minimum element, either use min() or do the following:
-- Consider the first element to be minimum.
-- Compare it with the adjacent elements.
-- If it is greater than other , swap the other element with the minimum element, else do nothing.
d) Continue above procedure for subarray(excluding sorted part) to sort the array.
------------------------------------------------------------------------------------------------------------

